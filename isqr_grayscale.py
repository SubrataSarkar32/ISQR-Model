# -*- coding: utf-8 -*-
"""ISQR_Grayscale.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U4TJ-nkK6W5Z4GqnEJSxe-pjaCqYBOOi
"""

from google.colab import drive
drive.mount('/content/drive/')

import os

import sys
# set_printoptions(threshold=sys.maxsize)
from PIL import Image
import cv2
from scipy.stats import entropy
from google.colab.patches import cv2_imshow
from sewar.full_ref import mse, rmse, psnr, uqi, ssim, ergas, scc, rase, sam, msssim, vifp
from matplotlib import pyplot as plt
import os
import numpy as np
import random
import pandas as pd
from skimage import io
from tqdm import tqdm
import math

def conv_img3_arcsin(img):
    small = cv2.resize(img,(256,256))
    converted = np.zeros((256,256))
    miny=np.amin(small)
    maxy=np.amax(small)
    #miny = 0
    #maxy = 255
    for i in range(0,256):
        for j in range(0,256):
            converted[i][j] = 2.0*np.arccos(np.sqrt((float(small[i][j])-float(miny))/(float(maxy)-float(miny)))) # ISQR Encoding
    return converted

def conv_img1_arcsin(img):
    small = cv2.resize(img,(256,256))
    H = np.array([[1,0],[0,1]])
    converted = np.zeros((256,256))
    img = small
    for i in range(0,len(img)) :
      for j in range(0,len(img[0])):
        a = img [i][j]
        a1= np.sin(a)
        a2 = np.cos(a)
        i_state= np.array([[a2],[a1]])
        c = convert_a(H,i_state)
        converted [i][j] = c

    return converted

def convert_a(H,i_state):
    cov = np.dot(H,i_state)
    si = cov * (1/np.sqrt (1))
    alpha=si[0][0]
    beta=si[1][0]
    t=[alpha , beta]
    e=random.choices(t,weights=[alpha**2,beta**2],k=1)
    if e[0] == beta:
      c = 1*255
    else:
      c = 0*255
    return c

def convshots_bw_arcsin(img,shots=200):
    img_list=[]
    img1 = conv_img3_arcsin(img)
    for i in range(shots):
        conv2 = conv_img1_arcsin(img1)
        img_list += [conv2]
    converted = np.zeros((256,256))
    sh = 0
    print(len(img),len(img[0]))
    for i in range(0,len(img)):
         for j in range(0,len(img[0])):
                val = 0
                for l in range(shots)
                    val += img_list[l][i][j]
                    '''
                    if img_list[l][i][j][k] in val:
                        val[img_list[l][i][j][k]]+=1
                    else:
                        val[img_list[l][i][j][k]]=1
                keys = list(val.keys())
                print(val)
                if(len(keys)>1):
                    if val[keys[0]]>val[keys[1]]:
                        converted[i][j][k] = keys[0]
                    else:
                        converted[i][j][k] = keys[1]
                else:
                    converted[i][j][k] = keys[0]
                    '''
                converted[i][j] = val/shots
                sh+=1
    return converted

def convert_single_image(path, folder, pathy, filey):
    img = cv2.imread(os.path.join(path, folder, filey))
    small = cv2.resize(img,(256,256))
    if filey.endswith(".png"):
        small = cv2.cvtColor(small, cv2.COLOR_BGRA2GRAY)
    else:
        small = cv2.cvtColor(small, cv2.COLOR_BGR2GRAY)
    real = small
    k = 500
    conv = convshots_bw_arcsin(real,shots=k)
    cv2.imwrite(os.path.join(pathy, folder, filey.split(".")[0]+".jpg"),conv)
    return True

#Google Drive

files = [f for f in os.listdir('/content/drive/MyDrive/CM_256*256 grayscale')]
print(files)
os.makedirs('/content/drive/MyDrive/CM_256*256 ISQR', exist_ok=True)

files = [f for f in os.listdir("/content/drive/MyDrive/CM_256*256 grayscale") if os.path.isfile(os.path.join("/content/drive/MyDrive/CM_256*256 grayscale", f))]
print(files)

for filey in files:
    print(filey)
    img = cv2.imread(os.path.join("/content/drive/MyDrive/CM_256*256 grayscale", filey)
    small = cv2.resize(img,(256,256))
    small = cv2.cvtColor(small, cv2.COLOR_BGR2GRAY)
    cv2_imshow(small)
    real = small
    for k in [1, 100, 500]
      conv = convshots_bw_arcsin(real,shots=k)
      cv2_imshow(conv)
      cv2.imwrite(os.path.join('/content/drive/MyDrive/CM_256*256 ISQR', filey.split(".")[0]+f"_{k}.jpg"),conv)
      cv2.imwrite(filey.split(".")[0]+".jpg",conv)
      restored = cv2.imread(filey.split(".")[0]+".jpg")
      restored = cv2.cvtColor(restored, cv2.COLOR_BGR2GRAY)